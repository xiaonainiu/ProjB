============================================
vis/result.rtx
19:46:56_Tuesday_02_May_2017
============================================
Feedback:
\tYour program ("Nimsys.java") has been submitted successfully.\n
\tCompiling your program with "javac"...\n
\t\tYour program has been compiled successfully :-)\n
Now, it's your responsibility to test your program for correctness!
Here is a simple test case, and the results:\n
============================================
Data for input file: in1
addplayer george,Washington,George
addplayer jadams,Adams,John
addplayer tom,Jefferson,Thomas
addplayer jmadison,Madison,James
addplayer jmonroe,Monroe,James
displayplayer
displayplayer jmadison
exit
============================================
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$									$
$									$
$									$
$george,George,Washington,0 games,0 wins			     |	$george,Washington,George,0 games,0 wins
jadams,John,Adams,0 games,0 wins				     |	jadams,Adams,John,0 games,0 wins
jmadison,James,Madison,0 games,0 wins				     |	jmadison,Madison,James,0 games,0 wins
jmonroe,James,Monroe,0 games,0 wins				     |	jmonroe,Monroe,James,0 games,0 wins
tom,Thomas,Jefferson,0 games,0 wins				     |	tom,Jefferson,Thomas,0 games,0 wins

$jmadison,James,Madison,0 games,0 wins				     |	$jmadison,Madison,James,0 games,0 wins

$								     /	$
\nOops, your results seem to be INCORRECT :-(\n
============================================
Data for input file: in2
addplayer george,Washington,George
addplayer george,Bush,George
addplayer gbush,Bush,George
displayplayer
exit
============================================
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$The player already exists.						$The player already exists.

$									$
$gbush,George,Bush,0 games,0 wins				     |	$gbush,Bush,George,0 games,0 wins
george,George,Washington,0 games,0 wins				     |	george,Washington,George,0 games,0 wins

$								     /	$
\nOops, your results seem to be INCORRECT :-(\n
============================================
Data for input file: in3
addplayer george,Washington,George
addplayer jadams,Adams,John
addplayer tom,Jefferson,Thomas
displayplayer
removeplayer ttom
removeplayer tom
displayplayer
removeplayer
y
displayplayer
exit
============================================
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$									$
$george,George,Washington,0 games,0 wins			     |	$george,Washington,George,0 games,0 wins
jadams,John,Adams,0 games,0 wins				     |	jadams,Adams,John,0 games,0 wins
tom,Thomas,Jefferson,0 games,0 wins				     |	tom,Jefferson,Thomas,0 games,0 wins

$The player does not exist.						$The player does not exist.

$									$
$george,George,Washington,0 games,0 wins			     |	$george,Washington,George,0 games,0 wins
jadams,John,Adams,0 games,0 wins				     |	jadams,Adams,John,0 games,0 wins

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$									$
$								     /	$
\nOops, your results seem to be INCORRECT :-(\n
============================================
Data for input file: in4
addplayer jcarter,Carter,Jimmy
displayplayer
editplayer jcrater,Carter,James
editplayer jcarter,Carter,James
displayplayer
exit
============================================
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$jcarter,Jimmy,Carter,0 games,0 wins				     |	$jcarter,Carter,Jimmy,0 games,0 wins

$The player does not exist.						$The player does not exist.

$									$
$jcarter,James,Carter,0 games,0 wins				     |	$jcarter,Carter,James,0 games,0 wins

$								     /	$
\nOops, your results seem to be INCORRECT :-(\n
============================================
Data for input file: in5
addplayer george,Washington,George
addplayer jadams,Adams,John
startgame 10,3,georg,jadams
startgame 10,3,george,jadams
3
4
3
3
0
1
exit
============================================
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$One of the players does not exist.					$One of the players does not exist.

$								     |	$Welcome to Nim
Initial stone count: 10						     <
Maximum stone removal: 3					     <
Player 1: George Washington					     <
Player 2: John Adams						     <

10 stones left: * * * * * * * * * *					10 stones left: * * * * * * * * * *
George's turn - remove how many?				     |	Washington's turn - remove how many?

7 stones left: * * * * * * *						7 stones left: * * * * * * *
John's turn - remove how many?					     |	Adams's turn - remove how many?
								     |	WRONG INPUT
Invalid move. You must remove between 1 and 3 stones.		     |	Adams's turn - remove how many?
								     <
7 stones left: * * * * * * *					     <
John's turn - remove how many?					     <

4 stones left: * * * *							4 stones left: * * * *
George's turn - remove how many?				     |	Washington's turn - remove how many?

1 stones left: *							1 stones left: *
John's turn - remove how many?					     |	Adams's turn - remove how many?
								     |	WRONG INPUT
Invalid move. You must remove between 1 and 1 stones.		     |	Adams's turn - remove how many?
								     <
1 stones left: *						     <
John's turn - remove how many?					     <

Game Over								Game Over
George Washington wins!						     |	Washington wins!
								     >
								     >	$command not exist

$								     /	$
\nOops, your results seem to be INCORRECT :-(\n
============================================
Data for input file: in6
addplayer george,Washington,George
addplayer jadams,Adams,John
addplayer tom,Jefferson,Thomas
addplayer jmadison,Madison,James
startgame 1,1,george,jadams
1
startgame 1,1,george,jadams
1
startgame 1,1,jadams,tom
1
startgame 1,1,tom,jmadison
1
rankings
resetstats
y
rankings
exit
============================================
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$									$
$									$
$									$
$									$
$								     |	$Welcome to Nim
Initial stone count: 1						     <
Maximum stone removal: 1					     <
Player 1: George Washington					     <
Player 2: John Adams						     <

1 stones left: *							1 stones left: *
George's turn - remove how many?				     |	Washington's turn - remove how many?

Game Over								Game Over
John Adams wins!						     |	Adams wins!

$								     |	$command not exist
Initial stone count: 1						     |
Maximum stone removal: 1					     |	$Welcome to Nim
Player 1: George Washington					     <
Player 2: John Adams						     <

1 stones left: *							1 stones left: *
George's turn - remove how many?				     |	Washington's turn - remove how many?

Game Over								Game Over
John Adams wins!						     |	Adams wins!
								     >
								     >	$command not exist

$								     |	$Welcome to Nim
Initial stone count: 1						     <
Maximum stone removal: 1					     <
Player 1: John Adams						     <
Player 2: Thomas Jefferson					     <

1 stones left: *							1 stones left: *
John's turn - remove how many?					     |	Adams's turn - remove how many?

Game Over								Game Over
Thomas Jefferson wins!						     |	Jefferson wins!

$								     |	$command not exist
Initial stone count: 1						     |
Maximum stone removal: 1					     |	$Welcome to Nim
Player 1: Thomas Jefferson					     <
Player 2: James Madison						     <

1 stones left: *							1 stones left: *
Thomas's turn - remove how many?				     |	Jefferson's turn - remove how many?

Game Over								Game Over
James Madison wins!						     |	Madison wins!
								     >
								     >	$command not exist

$100% | 01 games | James Madison				     |	$100% | 01 games | Madison James
67%  | 03 games | John Adams					     |	67%  | 03 games | Adams John
50%  | 02 games | Thomas Jefferson				     |	50%  | 02 games | Jefferson Thomas
0%   | 02 games | George Washington				     |	0%   | 02 games | Washington George

$Are you sure you want to reset all player statistics? (y/n)	     |	$Are you sure you want to remove all players? (y/n)

$0%   | 00 games | George Washington				     |	$0%   | 00 games | Washington George
0%   | 00 games | John Adams					     |	0%   | 00 games | Adams John
0%   | 00 games | James Madison					     |	0%   | 00 games | Madison James
0%   | 00 games | Thomas Jefferson				     |	0%   | 00 games | Jefferson Thomas

$								     /	$
\nOops, your results seem to be INCORRECT :-(\n
============================================
src/NimPlayer.java
19:46:53_Tuesday_02_May_2017
============================================
/**
 * Created by Shen YI(844373) on 2017/3/20.
 */
import java.util.Objects;

public class NimPlayer {

    String username;
    String firstname;
    String lastname;
    int game;
    int win;

    public NimPlayer(String username, String firstname, String lastname){
        this.username = username;
        this.firstname = firstname;
        this.lastname = lastname;
        this.game = 0;
        this.win = 0;
    }

    public String getUsername(){
        return this.username;
    }

    public String getFirstname(){
        return this.firstname;
    }

    public String getLastname(){
        return this.lastname;
    }

    public int getGame(){
        return this.game;
    }

    public int getWin(){
        return this.win;
    }

    public  double getwinningRatio(){
        return ((double)this.win*100/this.game);
    }

    public String printwinningRatio(){
        String ratio = String.valueOf(Math.round(getwinningRatio())) + "%";
        while (ratio.length()<4){
            ratio = ratio + " ";
        }
        return ratio;
    }

    public String printGame(){
        String game = String.valueOf(getGame());
        while (game.length()<2){
            game = "0"+game;
        }
        return game;
    }

    public String printrankings(){
        String rank = printwinningRatio()+" | "+printGame()+" games | "+getFirstname()+" "+getLastname();
        return rank;
    }

    public void edit(String firstname, String lastname){
        this.firstname = firstname;
        this.lastname = lastname;
    }

    public void reset(){
        this.game = 0;
        this.win = 0;
    }

    public void Win(){
        this.game++;
        this.win++;
    }

    public void Lose(){
        this.game++;
    }
}


============================================
src/Nimsys.java
19:46:53_Tuesday_02_May_2017
============================================
import java.util.Scanner;

/**
 * Created by Shen YI(844373) on 2017/3/26.
 */
public class Nimsys {
    static Scanner keyboard;
    static NimPlayer[] playerlist;

    public static void main(String[] args) {

        System.out.println("Welcome to Nim");

        keyboard = new Scanner(System.in);

        playerlist = new NimPlayer[100];

//        playerlist[0] = new NimPlayer("aaa", "afirstname", "alastname");
//        playerlist[1] = new NimPlayer("bbb", "bfirstname", "blastname");
//        playerlist[2] = new NimPlayer("ccc", "cfirstname", "clastname");
//        playerlist[3] = new NimPlayer("ddd", "dfirstname", "dlastname");
//        playerlist[4] = new NimPlayer("eee", "efirstname", "elastname");
//        playerlist[5] = new NimPlayer("es", "shen", "yi");
//        playerlist[6] = new NimPlayer("fff", "ffirstname", "flastname");
//        playerlist[7] = new NimPlayer("ggg", "gfirstname", "glastname");
//        playerlist[8] = new NimPlayer("hhh", "hfirstname", "hlastname");
//        playerlist[9] = new NimPlayer("iii", "ifirstname", "ilastname");
//        playerlist[10] = new NimPlayer("jjj", "jfirstname", "jlastname");
//        playerlist[11] = new NimPlayer("ssy", "siyi", "shao");
//        playerlist[12] = new NimPlayer("zzz", "zfirstname", "zlastname");
//
//        NimPlayer aaa = playerlist[0];
//        NimPlayer bbb = playerlist[1];
//        NimPlayer ccc = playerlist[2];
//        NimPlayer ddd = playerlist[3];
//        NimPlayer eee = playerlist[4];
//        NimPlayer es = playerlist[5];
//        NimPlayer fff = playerlist[6];
//        NimPlayer ggg = playerlist[7];
//        NimPlayer hhh = playerlist[8];
//        NimPlayer iii = playerlist[9];
//        NimPlayer jjj = playerlist[10];
//        NimPlayer ssy = playerlist[11];
//        NimPlayer zzz = playerlist[12];
//
//        aaa.Win();aaa.Win();aaa.Win();aaa.Win();aaa.Win();aaa.Win();aaa.Win();aaa.Win();aaa.Win();aaa.Win();aaa.Win();aaa.Win();
//        bbb.Win();bbb.Win();bbb.Win();bbb.Win();bbb.Win();bbb.Win();bbb.Win();bbb.Win();bbb.Win();bbb.Win();bbb.Lose();
//        ccc.Win();ccc.Win();ccc.Win();ccc.Win();ccc.Win();ccc.Win();ccc.Win();ccc.Win();ccc.Lose();ccc.Lose();ccc.Lose();
//        ddd.Win();ddd.Win();ddd.Win();ddd.Win();ddd.Win();ddd.Lose();ddd.Lose();
//        eee.Win();eee.Win();eee.Win();eee.Win();eee.Win();eee.Win();eee.Win();eee.Lose();eee.Lose();eee.Lose();eee.Lose();
//        es.Win();es.Win();es.Win();es.Win();es.Win();es.Win();es.Lose();es.Lose();es.Lose();es.Lose();
//        fff.Win();fff.Win();fff.Win();fff.Lose();fff.Lose();fff.Lose();
//        ggg.Win();ggg.Win();ggg.Win();ggg.Lose();ggg.Lose();ggg.Lose();ggg.Lose();
//        hhh.Win();hhh.Lose();hhh.Lose();
//        iii.Win();iii.Win();iii.Lose();iii.Lose();iii.Lose();iii.Lose();iii.Lose();iii.Lose();
//        jjj.Win();jjj.Win();jjj.Lose();jjj.Lose();jjj.Lose();jjj.Lose();jjj.Lose();jjj.Lose();
//        ssy.Win();ssy.Lose();ssy.Lose();ssy.Lose();ssy.Lose();ssy.Lose();ssy.Lose();ssy.Lose();ssy.Lose();ssy.Lose();ssy.Lose();
//        zzz.Lose();zzz.Lose();zzz.Lose();zzz.Lose();zzz.Lose();zzz.Lose();zzz.Lose();zzz.Lose();zzz.Lose();zzz.Lose();zzz.Lose();

        while (true) {
            identifyCommand(scanCommand());
        }
    }

    public static void identifyCommand(String command) {

        String[] commandsplit = command.split("\\s+");

        if (commandsplit[0].equals("addplayer")) {
            addplayer(commandsplit[1]);
        } else if (commandsplit[0].equals("removeplayer")) {
            if (commandsplit[0].length() == command.length()) {
                removeplayer(null);
            } else {
                removeplayer(commandsplit[1]);
            }

        } else if (commandsplit[0].equals("editplayer")) {
            editplayer(commandsplit[1]);
        } else if (commandsplit[0].equals("resetstats")) {
            if (commandsplit[0].length() == command.length()) {
                resetstats(null);
            } else {
                resetstats(commandsplit[1]);
            }
        } else if (commandsplit[0].equals("displayplayer")) {
            if (commandsplit[0].length() == command.length()) {
                displayplayer(null);
            } else {
                displayplayer(commandsplit[1]);
            }
        } else if (commandsplit[0].equals("rankings")) {
            if (commandsplit[0].length() == command.length()) {
                rankings(null);
            } else {
                rankings(commandsplit[1]);
            }
        } else if (commandsplit[0].equals("startgame")) {
            startgame(commandsplit[1]);
        } else if (commandsplit[0].equals("exit")) {
            System.exit(0);
        } else {
            System.out.println("command not exist");
        }
    }

    public static int checkExist(String username) {

        for (int i = 0; i < 100; i++) {
            NimPlayer player = playerlist[i];
            if (player != null) {
                if (username.compareTo(playerlist[i].username) < 0) {
                    return i;
                }
            }
            if (player == null) return i;
            String existuser = player.getUsername();
            if (existuser.equals(username)) return i;
        }
        return 100;
    }

    public static void addplayer(String arguments) {
        String[] argu = arguments.split(",");
        String username = argu[0];
        int index = checkExist(username);
        if (index == 100) {
            System.out.println("full");
        } else if (playerlist[index] == null) {
            playerlist[index] = new NimPlayer(argu[0], argu[1], argu[2]);
        } else if (playerlist[index].username.equals(username)) {
            System.out.println("The player already exists.");
        } else {
            for (int i = 99; i > index; i--) {
                if (playerlist[i - 1] != null) {
                    playerlist[i] = playerlist[i - 1];
                }
            }
            playerlist[index] = new NimPlayer(argu[0], argu[1], argu[2]);
        }
    }


    public static void removeplayer(String arguments) {
        String username = arguments;
        if (username == null) {
            System.out.println("Are you sure you want to remove all players? (y/n)");
            if (keyboard.nextLine().equals("y")) {
                playerlist = new NimPlayer[100];
            }
            return;
        }
        int index = checkExist(username);
        if (playerlist[index] == null) {
            System.out.println("The player does not exist.");
            return;
        }
        if (index == 100 || !(playerlist[index].username.equals(username))) {
            System.out.println("The player does not exist.");
        } else {
            for (int i = index; i < 99; i++) {
                if (playerlist[i + 1] != null) {
                    playerlist[i] = playerlist[i + 1];
                } else {
                    playerlist[i] = null;
                    return;
                }
                playerlist[99] = null;
            }
        }
    }

    public static void editplayer(String arguments) {
        String[] argu = arguments.split(",");
        String username = argu[0];
        String firstname = argu[1];
        String lastname = argu[2];
        int index = checkExist(username);
        if (playerlist[index] == null) {
            System.out.println("The player does not exist.");
            return;
        }
        if (index == 100 || !(playerlist[index].username.equals(username))) {
            System.out.println("The player does not exist.");
        } else {
            NimPlayer player = playerlist[index];
            player.edit(firstname, lastname);
        }
    }

    public static void resetstats(String argument) {
        String username = argument;
        if (username == null) {
            System.out.println("Are you sure you want to remove all players? (y/n)");
            if (keyboard.nextLine().equals("y")) {
                for (int i = 0; i < 100; i++) {
                    NimPlayer player = playerlist[i];
                    if (player != null) {
                        player.reset();
                    }
                }
            }
            return;
        }
        int index = checkExist(username);
        if (playerlist[index] == null) {
            System.out.println("The player does not exist.");
            return;
        }
        if (index == 100 || !(playerlist[index].username.equals(username))) {
            System.out.println("The player does not exist.");
        } else {
            NimPlayer player = playerlist[index];
            player.reset();
        }
    }

    public static void displayplayer(String argument) {
        String username = argument;
        if (username == null) {
            for (int i = 0; i < 100; i++) {
                NimPlayer player = playerlist[i];
                if (playerlist[i] != null) {
                    System.out.println(player.getUsername() + "," + player.getFirstname() + "," + player.getLastname() + "," + player.getGame() + " games," + player.getWin() + " wins");
                } else {
                    return;
                }
            }
            return;
        }
        int index = checkExist(username);
        if (index == 100 || playerlist[index] == null) {
            System.out.println("The player does not exist.");
        } else {
            NimPlayer player = playerlist[index];
            System.out.println(player.getUsername() + "," + player.getFirstname() + "," + player.getLastname() + "," + player.getGame() + " games," + player.getWin() + " wins");
        }
    }

    public static void rankings(String argument) {
        if (argument == null) argument = "desc";
        if (argument.equals("desc")) {
            int count = 0;
            for (int i = 1; i < 11; i++) {
                for (int j = 0; j < 100; j++) {
                    int rank = 1;
                    NimPlayer playerj = playerlist[j];
                    for (int k = 0; k < 100; k++) {
                        NimPlayer playerk = playerlist[k];
                        if (playerj != null && playerk != null) {
                            if (playerj.getwinningRatio() < playerk.getwinningRatio())
                                rank++;
                        }
                    }
                    if (rank == i && playerj != null && count < 10) {
                        System.out.println(playerj.printrankings());
                        count++;
                    }
                }
            }
        }
    }

    public static void startgame(String arguments) {
        String[] argu = arguments.split(",");
        int initialstones = Integer.parseInt(argu[0]);
        int upperbound = Integer.parseInt(argu[1]);
        String username1 = argu[2];
        String username2 = argu[3];
        int index1 = checkExist(username1);
        int index2 = checkExist(username2);
        NimPlayer player1 = playerlist[index1];
        NimPlayer player2 = playerlist[index2];
        if (player1 == null || player2 == null) {
            System.out.println("One of the players does not exist.");
            return;
        } else if (!player1.username.equals(username1) || !player2.username.equals(username2)) {
            System.out.println("One of the players does not exist.");
            return;
        } else {
            NimGame game = new NimGame(initialstones, upperbound, player1, player2);
        }

    }

    public static String scanCommand() {

        System.out.println();
        System.out.print("$");
        String command = keyboard.nextLine();
        return command;
    }
}
============================================
src/NimGame.java
19:46:53_Tuesday_02_May_2017
============================================
/**
 * Created by es on 2017/4/27.
 */

public class NimGame {
//    static Scanner keyboard;
    public static int stonenum;
    public static int upperbound;
    NimPlayer player1;
    NimPlayer player2;

    //To get the value of the upper bound and the number of stones
    public NimGame(int initialstones, int upperbound, NimPlayer player1, NimPlayer player2) {
        this.stonenum = initialstones;
        this.upperbound = upperbound;
        this.player1 = player1;
        this.player2 = player2;

        System.out.println("Welcome to Nim");

            printNimstoneinfo();

            //to define the active player, which is going to play next, or win.
            int turn = 0;
            NimPlayer activeplayer = null;

            while (!empty()) {
                if (turn % 2 == 0) {
                    while (!playingNim(player1)) ;
                    activeplayer = player2;
                } else {
                    while (!playingNim(player2)) ;
                    activeplayer = player1;
                }
                turn++;
            }

            System.out.println();
            System.out.println("Game Over");
            if (turn % 2 == 0){
                player1.Win();
                player2.Lose();
            }else {

                player1.Lose();
                player2.Win();
            }
            System.out.println(activeplayer.getFirstname() + " wins!");

    }

        public static boolean playingNim(NimPlayer player) {
        System.out.println(player.getFirstname() + "'s turn - remove how many?");
        int removenum = Nimsys.keyboard.nextInt();
        if (removenum > getUpperbound() || removenum < 1 || removenum > reststone()) {
            System.out.println("WRONG INPUT");
            return false;
        } else {
            removeStone(removenum);
            return true;
        }
    }

    public static void removeStone(int r) {
        remove(r);
    }

    //To remove stones, if there is stones left, show the stone's information
    public static void remove(int stone) {
        stonenum = stonenum - stone;
        if(!empty()){
            printNimstoneinfo();
        }
    }
    //To check if there is no stone left
    public static boolean empty() {
        if (stonenum == 0) return true;
        else {
            return false;
        }
    }

    //show the number of stones left
    public static int reststone() {
        return stonenum;
    }

    //show the stone's information
    public static void printNimstoneinfo() {
        System.out.println();
        System.out.print(stonenum + " stones left:");
        for (int i = 0; i < stonenum; i++) {
            System.out.print(" *");
        }
        System.out.println();
    }

    //Output the upper bound
    public static int getUpperbound() {
        return upperbound;
    }
}
